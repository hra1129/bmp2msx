// -------------------------------------------------------------
//	TITLE		:	File Access Utility
//	FILE		:	fileuty.cpp
//	COPYRIGHT	:	(C)2001 t.hara
//	COMENT		:	ファイルアクセス関数群
//					Ｃ標準のファイルアクセス関数と似たインターフェース
//					を採用した WindowsAPI ベースの関数群
//					Ｃ標準のファイルアクセスによる不都合を避け、かつ
//					Windows 以外への移植性を維持する目的
//	HISTORY		:	2001/02/07	v0.00	製作開始
//					2001/02/11	v1.00	基本機能の実装完了
//					2001/02/14	v1.01	メモリアクセス機能を追加
// -------------------------------------------------------------

#ifndef	_fileuty_h_
#define	_fileuty_h_

// =============================================================
//	インクルード

#include	"typeuty.h"											//	基本型定義

// =============================================================
//	設定

#ifdef	_WIN32
//	for Win32

#include <windows.h>

#define	FU_MAX_PATH_LENGTH	MAX_PATH							//	最大パス長
#define	FU_FILE_HANDLE		HANDLE								//	ファイルハンドル
#define	FU_BUFFER_LENGTH	10000								//	printf バッファサイズ

#define	FU_SEEK_TOP			FILE_BEGIN							//	ファイルの先頭からシーク
#define	FU_SEEK_CURRENT		FILE_CURRENT						//	現在位置からシーク
#define	FU_SEEK_BOTTOM		FILE_END							//	ファイルの終了からシーク

#define	FU_INVALID_HANDLE	NULL								//	不正なファイルハンドル

#else
//	for Others	( 必要な方は、fileuty.cpp の方を環境に応じて作成してください )

#include <stdio.h>

#define	FU_MAX_PATH_LENGTH	32768								//	最大パス長
#define	FU_FILE_HANDLE		FILE*								//	ファイル識別子
#define	FU_BUFFER_LENGTH	10000								//	printf バッファサイズ

#define	FU_SEEK_TOP			SEEK_SET							//	ファイルの先頭からシーク
#define	FU_SEEK_CURRENT		SEEK_CUR							//	現在位置からシーク
#define	FU_SEEK_BOTTOM		SEEK_END							//	ファイルの終了からシーク

#define	FU_INVALID_HANDLE	NULL								//	不正なファイルハンドル

#endif

//	共通

typedef enum {
	FU_MODE_FILE,											//	ファイル
	FU_MODE_LINKMEMORY,										//	連結メモリ（解放しない）
	FU_MODE_ALLOCMEMORY,									//	確保メモリ（解放する）
} FU_MODE;

// =============================================================
//	構造体

// -------------------------------------------------------------
//	ファイル構造体
//	内容：固有のファイルを示す構造体

typedef struct fu_file_tag {
	FU_FILE_HANDLE	h_file;										//	ファイルハンドル
	bool			b_binary;									//	バイナリなら true , テキストなら false
	FU_MODE			n_mode;										//	対象モード
	dword			n_size;										//	メモリサイズ
	byte*			p_memory;									//	メモリアドレス
	dword			n_pointer;									//	メモリポインタ
} FU_FILE;

// =============================================================
//	関数プロトタイプ

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルを開く
//	2.	引数
//		s_filename	...	(I)	ファイル名
//		s_option	...	(I)	アクセス指定
//								"rt"	...	テキスト読み込みアクセス
//								"wt"	...	テキスト読み書きアクセス
//								"at"	...	テキスト追加書き込みアクセス
//								"rb"	...	バイナリ読み込みアクセス
//								"wb"	...	バイナリ読み書きアクセス
//								"ab"	...	バイナリ追加書き込みアクセス
//							文字の順番・長さは無関係。
//							後にある方の文字が有効。
//							デフォルトは "rt"
//	3.	返値
//		FU_INVALID_HANDLE	...	失敗
//		その他				...	成功（ファイル構造のアドレス）
//	4.	備考
//		s_option に NULL を指定すると "rb" を指定したことになる
// -------------------------------------------------------------
FU_FILE* fu_open( const char* s_filename, const char* s_option );

// -------------------------------------------------------------
//	1.	日本語名
//		連結メモリを開く
//	2.	引数
//		p_memory	...	(I)	リンク先メモリ
//		n_size		...	(I)	サイズ（バイト数）
//	3.	返値
//		NULL	...	失敗
//		その他	...	成功（ファイル構造のアドレス）
//	4.	備考
//		p_memory で示されるメモリにアクセス可能なファイル構造体
//		を返す。fu_close しても p_memory は解放しない。
//		成功した場合はアプリ終了前に fu_close を呼ばねばならない。
//		アクセスモードは、常にバイナリ、リードライト。
//		p_memory の不正はチェックしない。
// -------------------------------------------------------------
FU_FILE* fu_open_linkmemory( void* p_memory, dword n_size );

// -------------------------------------------------------------
//	1.	日本語名
//		確保メモリを開く
//	2.	引数
//		n_size		...	(I)	サイズ（バイト数）
//	3.	返値
//		NULL	...	失敗
//		その他	...	成功（ファイル構造のアドレス）
//	4.	備考
//		fu_close すると確保したメモリを解放する。
//		成功した場合はアプリ終了前に fu_close を呼ばねばならない。
//		アクセスモードは、常にバイナリ、リードライト。
// -------------------------------------------------------------
FU_FILE* fu_open_allocmemory( dword n_size );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルを閉じる
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//	3.	返値
//		なし
//	4.	備考
//		未初期化の p_file を指定してはならない
// -------------------------------------------------------------
void fu_close( FU_FILE* p_file );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルに文字列を出力する
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//		s_format	...	(I)	出力する書式
//		...			...	(I)	引数群
//	3.	返値
//		なし
//	4.	備考
//		テキストモードの場合、\n を \r\n に変換して出力する
// -------------------------------------------------------------
void fu_printf( FU_FILE* p_file, const char* s_format, ... );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルの終端に達したかどうか調べる
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//	3.	返値
//		true	...	終端に達している
//		false	...	終端に達していない
//	4.	備考
//		なし
// -------------------------------------------------------------
bool fu_eof( FU_FILE* p_file );

// -------------------------------------------------------------
//	1.	日本語名
//		１行入力する
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//		s_buffer	...	(O)	入力データの格納先アドレス
//		n_size		...	(I)	s_buffer のサイズ
//	3.	返値
//		s_buffer
//	4.	備考
//		いきなり失敗した場合は、s_buffer に "" を格納する
//		途中まで読み込んだ場合は、読み込んだところまでを s_buffer
//		に格納する
//		テキストモードの場合は、\r\n を \n に変換する
// -------------------------------------------------------------
char* fu_gets( FU_FILE* p_file, char* s_buffer, int n_size );

// -------------------------------------------------------------
//	1.	日本語名
//		指定のバイト数だけ書き出す
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//		s_buffer	...	(I)	書き出すデータのアドレス
//		n_size		...	(I)	書き出すデータのサイズ byte
//	3.	返値
//		書き出したバイト数
//	4.	備考
//		なし
// -------------------------------------------------------------
int fu_write( FU_FILE* p_file, const void* s_buffer, int n_size );

// -------------------------------------------------------------
//	1.	日本語名
//		指定のバイト数だけ読み込む
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//		s_buffer	...	(O)	読み込み先アドレス
//		n_size		...	(I)	読み込むデータのサイズ byte
//	3.	返値
//		読み出したバイト数
//	4.	備考
//		なし
// -------------------------------------------------------------
int fu_read( FU_FILE* p_file, void* s_buffer, int n_size );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルシーク
//	2.	引数
//		p_file		...	(I)	ファイル構造のアドレス
//		n_offset	...	(I)	ファイル位置
//		n_origin	...	(I)	シーク基準位置
//							FU_SEEK_TOP		...	ファイル先頭
//							FU_SEEK_CURRENT	...	現在位置
//							FU_SEEK_BOTTOM	...	ファイル終端
//	3.	返値
//		true	...	成功
//		false	...	失敗
//	4.	備考
//		なし
// -------------------------------------------------------------
bool fu_seek( FU_FILE* p_file, sint32 n_offset, int n_origin );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルの長さを求める
//	2.	引数
//		p_file	...	(I)	ファイルハンドル
//	3.	返値
//		ファイルの長さ
//	4.	備考
//		４ＧＢ以内のファイルのみ
// -------------------------------------------------------------
unsigned long fu_length( FU_FILE* p_file );

#endif	//	_fileuty_h_

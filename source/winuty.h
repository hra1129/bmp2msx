// -------------------------------------------------------------
//	TITLE		:	Windows Utility
//	FILE		:	winuty.h
//	COPYRIGHT	:	(C)2001 t.hara
//	COMENT		:	Windows 補助関数群
//	HISTORY		:	2001/02/11	v0.00	製作開始
// -------------------------------------------------------------

#ifndef	_winuty_h_
#define	_winuty_h_

// =============================================================
//	インクルード

#include <windows.h>
#include <commctrl.h>											//	コモンコントロール

// =============================================================
//	関数プロトタイプ

#define	ELMCNT( a )	( sizeof( a ) / sizeof( (a)[0] ) )

// =============================================================
//	アプリケーション標準

// -------------------------------------------------------------
//	1.	日本語名
//		インスタンスハンドルを登録する
//	2.	引数
//		h_ins	...	(I)	インスタンスハンドル
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_set_instance( HINSTANCE h_ins );

// -------------------------------------------------------------
//	1.	日本語名
//		インスタンスハンドルを取得する
//	2.	引数
//		なし
//	3.	返値
//		登録したインスタンスハンドル
//	4.	備考
//		なし
// -------------------------------------------------------------
HINSTANCE wu_get_instance( void );

// -------------------------------------------------------------
//	1.	日本語名
//		メッセージ処理
//	2.	引数
//		なし
//	3.	返値
//		true	...	正常
//		false	...	アプリケーション終了要求
//	4.	備考
//		なし
// -------------------------------------------------------------
bool wu_do_events( HWND h_wnd, HACCEL h_accel );

// -------------------------------------------------------------
//	1.	日本語名
//		一般的なウィンドウクラスの設定
//	2.	引数
//		p_wndclass	...	(O)	ウィンドウクラス構造体
//		p_class		...	(I)	ウィンドウクラス名
//		n_icon		...	(I)	アイコンＩＤ
//		p_wndclass	...	(I)	ウィンドウ関数
//	3.	返値
//		なし
//	4.	備考
//		この関数を使う前に wu_set_instance でインスタンスハンドル
//		を指定しておかねばならない
// -------------------------------------------------------------
void wu_get_wndclassex( WNDCLASSEX* p_wndclass, const char* p_class, int n_icon, WNDPROC p_wndproc );

// -------------------------------------------------------------
//	1.	日本語名
//		ウィンドウ設定
//	2.	引数
//		*p_create		...	(O)	ウィンドウ生成構造体
//		*p_class		...	(I)	ウィンドウクラス名
//		*p_caption		...	(I)	ウィンドウタイトル
//		n_width			...	(I)	ウィンドウ幅
//									0 ... 省略と見なしデフォルト値を設定する
//		n_height		...	(I)	ウィンドウ高さ
//									0 ... 省略と見なしデフォルト値を設定する
//	3.	返値
//		なし
//	4.	備考
//		ウィンドウ位置は画面の中央付近に設定される
// -------------------------------------------------------------
void wu_get_createstruct( CREATESTRUCT* p_create,const char* p_class, const char* p_caption, 
						  int n_width, int n_height );

// -------------------------------------------------------------
//	1.	日本語名
//		ウィンドウの作成
//	2.	引数
//		p_create	...	(I)	ウィンドウ生成パラメータ
//	3.	返値
//		NULL		...	ウィンドウ生成失敗
//		他			...	生成したウィンドウのウィンドウハンドル
//	4.	備考
//		ウィンドウ生成が失敗する要因は次の２種類
//			(1)	ウィンドウ生成パラメータに不備がある場合
//			(2)	WM_CREATE イベントで -1 が返された場合
//		この関数の呼び出しのみではこれらを区別できない。関数呼び
//		出し前にグローバル変数に規定値を格納し、WM_CREATE の処理
//		先頭にて別の規定値を格納する。そのグローバル変数を参照す
//		ることで区別することができる。
// -------------------------------------------------------------
HWND wu_create_window( CREATESTRUCT* p_create );

// -------------------------------------------------------------
//	1.	日本語名
//		実行ファイルの存在するディレクトリを取得する
//	2.	引数
//		p_buffer	...	(O)	パスを出力するバッファのアドレス
//	3.	返値
//		なし
//	4.	備考
//		バッファは MAX_PATH のサイズだけ確保しておけば十分
// -------------------------------------------------------------
void wu_get_exe_path( char* p_buffer );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルを開くダイアログ表示（単独ファイル）
//	2.	引数
//		h_wnd		...	(I)		親ウィンドウハンドル
//		p_name		...	(I/O)	デフォルトファイル
//								選択されたファイルが格納される。
//		p_filter	...	(I/O)	拡張子
//	3.	返値
//		true	...	成功
//		false	...	失敗
//	4.	備考
//		なし
// -------------------------------------------------------------
bool wu_dialog_select_open_file( HWND h_wnd, char* p_name, const char* p_filter );

// -------------------------------------------------------------
//	1.	日本語名
//		ファイルを開くダイアログ表示（複数ファイル）
//	2.	引数
//		h_wnd		...	(I)		親ウィンドウハンドル
//		p_name		...	(I/O)	デフォルトファイル
//								選択されたファイルが格納される。
//		p_filter	...	(I/O)	拡張子
//	3.	返値
//		true	...	成功
//		false	...	失敗
//	4.	備考
//		p_name は MAX_PATH のサイズある必要がある
// -------------------------------------------------------------
bool wu_dialog_multi_select_open_file( HWND h_wnd, char* p_name, const char* p_filter );

// =============================================================
//	ウィンドウ汎用操作関数

// -------------------------------------------------------------
//	1.	日本語名
//		クライアント領域のサイズ指定
//	2.	引数
//		h_wnd		...	(I)	ウィンドウハンドル
//		n_width		...	(I)	幅
//		n_height	...	(I)	高さ
//	3.	返値
//		なし
//	4.	備考
//		数回の試行後、設定不能ならあきらめる
// -------------------------------------------------------------
void wu_set_client_rect( HWND h_wnd, int n_width, int n_height );

// -------------------------------------------------------------
//	1. 関数名
//		ウィンドウ を 指定のウィンドウ の中央へ移動する
//	2. 引数
//		h_wnd		...	(I)	対象のウィンドウハンドル
//		h_basewnd	...	(I)	基準のウィンドウハンドル
//	3. 返値
//		なし
//	4. 備考
//		基準と対象のウィンドウの親子関係などは問わない
//		基準を NULL にするとデスクトップを基準にする
// -------------------------------------------------------------
void wu_move_center( HWND h_wnd, HWND h_basewnd );

// =============================================================
//	リストビュー関連

// -------------------------------------------------------------
//	1.	日本語名
//		列の数を取得
//	2.	引数
//		h_wnd		...	(I)	親ウィンドウハンドル
//		n_id		...	(I)	リストビューのＩＤ
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
int wu_listview_get_column_count( HWND h_wnd, int n_id );

// -------------------------------------------------------------
//	1.	日本語名
//		列を追加する
//	2.	引数
//		h_wnd		...	(I)	親ウィンドウハンドル
//		n_id		...	(I)	リストビューのＩＤ
//		s_name		...	(I)	列名
//		n_width		...	(I)	列幅
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_listview_add_column( HWND h_wnd, int n_id, const char* s_name, int n_width );

// -------------------------------------------------------------
//	1.	日本語名
//		項目数を取得
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウ
//		n_id	...	(I)	リストビューのＩＤ
//	3.	返値
//		項目数
//	4.	備考
//		なし
// -------------------------------------------------------------
int wu_listview_get_count( HWND h_wnd, int n_id );

// -------------------------------------------------------------
//	1.	日本語名
//		新しい項目の追加
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウ
//		n_id	...	(I)	リストビューのＩＤ
//		s_name	...	(I)	追加する項目名
//	3.	返値
//		挿入した項目のインデックス（行番号）
//	4.	備考
//		なし
// -------------------------------------------------------------
int wu_listview_add_item( HWND h_wnd, int n_id, const char* s_name );

// -------------------------------------------------------------
//	1.	日本語名
//		項目のサブアイテムの設定
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウハンドル
//		n_id	...	(I)	リストビューのＩＤ
//		n_row	...	(I)	サブアイテムの行番号
//		n_col	...	(I)	サブアイテムの列番号
//		s_name	...	(I)	サブアイテムに設定する文字列
//	3.	返値
//		なし
//	4.	備考
//		n_col を 0 にすると項目名も変更できる
// -------------------------------------------------------------
void wu_listview_set_subitem( HWND h_wnd, int n_id, int n_row, int n_col,const char* s_name );

// =============================================================
//	コンボボックス関連

// -------------------------------------------------------------
//	1.	日本語名
//		コンボボックスに複数の文字列を追加する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	コンボボックスのID
//		s_array	...	(I);	文字列ポインタの配列アドレス
//		n_count	...	(I);	s_array の要素数
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_combo_set_items( HWND h_wnd, int n_id, const char* s_array[], int n_count );

// -------------------------------------------------------------
//	1.	日本語名
//		コンボボックスの選択カーソル位置を指定する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	コンボボックスのID
//		n_index	...	(I);	選択位置
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_combo_set_index( HWND h_wnd, int n_id, int n_index );

// -------------------------------------------------------------
//	1.	日本語名
//		コンボボックスの選択カーソル位置を取得する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	コンボボックスのID
//	3.	返値
//		インデックス値
//	4.	備考
//		なし
// -------------------------------------------------------------
int wu_combo_get_index( HWND h_wnd, int n_id );

// =============================================================
//	ボタン関連

// -------------------------------------------------------------
//	1.	日本語名
//		ボタンにアイコンをセットする
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	ボタンのID
//		hIcon	...	(I);	セットするアイコン
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_button_set_icon( HWND h_wnd, int n_id, HICON hIcon );

// -------------------------------------------------------------
//	1.	日本語名
//		ボタンのチェック状態をセットする
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	ボタンのID
//		b_check	...	(I);	チェック状態
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_button_set_check( HWND h_wnd, int n_id, bool b_check );

// -------------------------------------------------------------
//	1.	日本語名
//		ボタンのチェック状態を取得する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	ボタンのID
//	3.	返値
//		true	...	チェック済み
//		false	...	未チェック、グレイ
//	4.	備考
//		なし
// -------------------------------------------------------------
bool wu_button_get_check( HWND h_wnd, int n_id );

// =============================================================
//	メニュー関連

// -------------------------------------------------------------
//	1.	日本語名
//		メニューのチェック状態を指定する
//	2.	引数
//		h_wnd	...	(I);	メニューを持ったウィンドウハンドル
//		n_id	...	(I);	メニューアイテムID
//		b_check	...	(I);	チェック状態
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_menu_set_check( HWND h_wnd, int n_id, BOOL b_check );

// -------------------------------------------------------------
//	1.	日本語名
//		メニューの有効無効を設定する
//	2.	引数
//		h_wnd	...	(I);	メニューを持ったウィンドウハンドル
//		n_id	...	(I);	メニューアイテムID
//		b_enable	...	(I);	有効無効状態
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_menu_enabled( HWND h_wnd, int n_id, BOOL b_enable );

// =============================================================
//	リストボックス関連

// -------------------------------------------------------------
//	1.	日本語名
//		リストボックスに複数の文字列を追加する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	リストボックスのID
//		s_array	...	(I);	文字列ポインタの配列アドレス
//		n_count	...	(I);	s_array の要素数
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_list_set_items( HWND h_wnd, int n_id, const char* s_array[], int n_count );

// -------------------------------------------------------------
//	1.	日本語名
//		リストボックスに文字列を追加する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	リストボックスのID
//		s_name	...	(I);	文字列
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_list_add_item( HWND h_wnd, int n_id, const char* s_name );

// -------------------------------------------------------------
//	1.	日本語名
//		リストボックスを空にする
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	リストボックスのID
//		s_name	...	(I);	文字列
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_list_clear( HWND h_wnd, int n_id );

// -------------------------------------------------------------
//	1.	日本語名
//		リストボックスの選択カーソル位置を指定する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	リストボックスのID
//		n_index	...	(I);	選択位置
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_list_set_index( HWND h_wnd, int n_id, int n_index );

// -------------------------------------------------------------
//	1.	日本語名
//		リストボックスの選択カーソル位置を取得する
//	2.	引数
//		h_wnd	...	(I);	親ウィンドウハンドル
//		n_id	...	(I);	リストボックスのID
//	3.	返値
//		インデックス値
//	4.	備考
//		なし
// -------------------------------------------------------------
int wu_list_get_index( HWND h_wnd, int n_id );

// =============================================================
//	タブコントロール関連

// -------------------------------------------------------------
//	1.	日本語名
//		タブコントロールの項目数を取得する
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウハンドル
//		n_id	...	(I)	タブコントロールのID
//	3.	返値
//		項目数
//	4.	備考
//		失敗すると 0 が返る
// -------------------------------------------------------------
int wu_tab_get_count( HWND h_wnd, int n_id );

// -------------------------------------------------------------
//	1.	日本語名
//		タブコントロールに項目を追加する
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウハンドル
//		n_id	...	(I)	タブコントロールのID
//		s_name	...	(I)	追加するタブ名
//	3.	返値
//		-1	...	失敗
//		他	...	新しいタブのインデックス
//	4.	備考
//		登録済みタブの最後に追加する
// -------------------------------------------------------------
int wu_tab_add_item( HWND h_wnd, int n_id, const char* s_name );

// -------------------------------------------------------------
//	1.	日本語名
//		タブコントロールに複数の文字列を追加する
//	2.	引数
//		h_wnd	...	(I)	親ウィンドウハンドル
//		n_id	...	(I)	タブコントロールのID
//		s_array	...	(I)	文字列ポインタの配列アドレス
//		n_count	...	(I)	s_array の要素数
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_tab_set_items( HWND h_wnd, int n_id, const char* s_array[], int n_count );

// =============================================================
//	ツールチップ

// -------------------------------------------------------------
//	1.	日本語名
//		ツールチップを作成する
//	2.	引数
//		hWnd	...	(I)	親ウィンドウハンドル
//	3.	返値
//		!NULL	...	ツールチップのウィンドウハンドル
//		NULL	...	失敗
//	4.	備考
//		なし
// -------------------------------------------------------------
HWND wu_ttip_create( HWND hWnd );

// -------------------------------------------------------------
//	1.	日本語名
//		ツールチップに表示対象を追加
//	2.	引数
//		hTip	...	ツールチップのハンドル
//		nId		...	コントロールのＩＤ
//		s_tips	...	表示する文字列
//	3.	返値
//		なし
//	4.	備考
//		なし
// -------------------------------------------------------------
void wu_ttip_set_item( HWND hTip, int nId, char* s_tips );

#endif	//	_winuty_h_
